# This is a set of Anki cards. Example:
# What is meant by "resident memory"?
# What do you call memory that currently resides in main memory?
# 
# What is the synonym for physical memory?
# What is the synonym for main memory?
# 
# What kind of memory is the heap (in terms of paging)?
# Anonymous memory.
# 
# Historically, how big have memory pages been? (2 values)
# 4 or 8 KB.
# 
# How can virtual memory be bigger than main memory?
# Swapping.
# 
# What are the two kinds of paging?
# * file system paging
# * swapping
# 
# What is a synonym for swapping?
# What is a synonym for anonymous paging?
# 
# Why is anonymous paging called anonymous?
# Because it doesn't refer to data with any defined file system location.
# 
# In terms of memory, what does RSS stand for?
# Resident Set Size.
# 
# What is the difference between allocated and mapped memory?
# Allocated memory has been reserved in virtual memory, but not necessarily mapped to a location in physical memory.
# 
# What does resident set size measure?
# The amount of memory that has been allocated and mapped to physical memory.
# 
# What does virtual memory size measure?
# The amount of memory that has been allocated in virtual memory, whether or not it has been mapped.
# 
# Besides being mapped to physical memory, what else might a virtual address be mapped to?
# Swap.
# 
# What was the maximum process size on the PDP-11?
# 64 KB.
# 
# What are the states that a page of virtual memory can be in? (4)
# * {{c1::unallocated}}
# * {{c2::allocated, but unmappped}}
# * {{c3::allocated and mapped to main memory}}
# * {{c4::allocated and mapped to swap}}
# 
# What stdlib function is used to allocate memory?
# malloc.
# 
# In terms of memory, what does PSS stand for?
# Proportional Set Size.
# 
# What does proportional set size measure?
# The private memory usage of a process, excluding shared memory.
# 
# Which tool can I use to measure proportional set size?
# pmap.
# 
# What's the maximum amount of memory a 32bit process can address?
# 4 GB.
# 
# On Linux, how much virtual memory is reserved for the kernel?
# 1 GB.
# 
# What does DRAM stand for?
# Dynamic Random Access Memory.
# 
# What two electrical components are used for each bit in DRAM?
# A capacitor and a transistor.
# 
# Why does DRAM lose values when power is removed?
# Because a capacitor loses charge without power.
# 
# What do we use to measure the access time of main memory?
# The time between sending a memory module the desired address and when the data is available to be read.
# 
# What is the weird term used to refer to main memory access time?
# Column address strobe.
# 
# Per Gregg, what is the access latency for DDR4?
# 10-20 ns.

# What is the difference between fsync and fdatasync?
# fdatasync only waits for the file data to be written, and essential metadata.

# In VFS, what does the superblock object represent?
# A mounted filesystem.

# What does dentry stand for?
# Directory entry.

# What does inode stand for?
# Index node.

# What do you call the VFS object that stores the filesystem's metadata?
# The superblock.

# What 3 types of files is mknod used to create?
# * sockets
# * device files
# * named pipes

# What does a dentry represent (note that this is not merely what it stands for)?
# A component of a path.

# Why might a dentry object not associated with any inode be kept around?
# Something might continually check for a file's existence. Without a dentry, this would be slow.

# What operation do dentry objects speed up?
# Path traversal.

# What are the three possible states for a dentry object?
# * negative
# * used
# * unused

# What makes sendfile performant?
# It happens entirely in kernel space.

# Where is the super_block struct defined?
# linux/fs.h

# Where is the inode struct defined?
# linux/fs.h

# Where is the dentry struct defined?
# linux/dcache.h

# Where is the page struct defined?
# linux/mm_types.h

# Where is the file struct defined?
# linux/fs.h

# Where is the address_space struct defined?
# linux/fs.h

# How to I get the inode struct from the file struct?
# f_inode

# How do I get the device identifier from the superblock struct?
# s_dev

# How do I get the superblock from the inode struct?
# i_sb

# What inode field tells me the inode number?
# i_ino

# How do I get the inode from a page struct?
# page->mapping->host

# How do I get the inode from a file struct?
# file->f_inode

# Where is vfs_read defined?
# fs/read_write.c

# Where is generic_file_read_iter defined?
# mm/filemap.c

# Where is filemap_read defined?
# mm/filemap.c

# How big are memory pages on 32bit architectures?
# 4 KB

# How big are memory pages on 64bit architectures?
# 8 KB

# What struct represents every physical page?
# struct page

# When a page struct is used for the page cache, what field will be set?
# mapping

# For the page struct, what is the type of the mapping field?
# struct address_space

# What kind of memory does the page struct correspond to?
# Physical memory.

# The same data structure may be allocated and deallocated many times. What other data structure makes this performant?
# A free list.

# Why does a free list make allocation and deallocation performant?
# Because if we need the object again, we can just get it from the free list.

# What is one way to conceptualize the free list?
# A cache for data structures.

# In terms of the free list, what do we do when we no longer need a data structure?
# We return it to the free list.

# Why is the slab layer necessary?
# If there were multiple free lists, it would be difficult to manage them all. What is the solution to this?

# What is the slab layer divided up into?
# Caches.

# In terms of the slab layer, what is a cache?
# It's a cache for a specific type of data structure.

# Typically, how big is a slab?
# A page.

# # What are some things cached in the slab layer?
# # * struct inode
# # * struct task_struct

# What is the memory difference between the user and kernel stacks?
# User stacks are dynamically sized, while the kernel stack is fixed size.

# How big is the per-process kernel stack? (range)
# 1-2 pages.

# We used to make the per-process kernel stack 2 pages. Now it's 1 page. Why?
# The longer an OS operates, the harder it is to find two continuous pages.

# In terms of memory, what is temporal locality?
# What do you call the fact that if you access a memory location, you're likely to access it again soon?

# What is the struct used to represent entries in the page cache?
# What is `struct address_space` for?

# What field of address_space points to the inode?
# host

# How do we implement something sort of like methods for a struct?
# The struct can point to another struct that lists the functions associated with the struct.

# In terms of the page cache, what is a dirty page?
# What do we call a page cache page that has been modified?

# What do you call the in-memory representation of a physical disk block?
# A buffer.

# What is the upper limit on the size of a fs block?
# The page size.

# What do you call the struct corresponding to a dikk block buffer?
# struct buffer_head

# Where is the buffer_head struct defined?
# linux/buffer_head.h

# What is the purpose of the buffer_head struct?
# It maps an on-disk block to an in-memory buffer.

# What do you call the representation of an in-flight block IO operation?
# What is the bio struct?

# Where is the bio struct defined?
# linux/bio.h

# What Linux version unified the buffer and page cache?
# 2.4

# In computer science, what is meant by a gang?
# In computer science, what is the term of a group of things that operate in parallel?

# What is the oldest struct in Linux?
# buffer_head

# What do you call the new struct that, like buffer_head, maps disk blocks to locations in the page cache?
# struct iomap

# What year was ext2 added to the kernel?
# 1993

# When did ext4 gain support for extents?
# 2006

# What is always the first block in a file system?
# The boot block.

# In terms of file systems, what is the boot block for?
# It holds information about how to boot the operating system.

# What is vmlinux?
# What is the name of the Linux kernel binary?

# What command tells methe number of CPUs?
# What does nproc do?

# In make, what short flag do I use to make it build in parallel?
# In make, what does the -j flag do?

# For a hard disk, what two physical operations are the source of most latency?
# * seek
# * rotation

# What does initramfs stand for?
# Initial RAM file system.

# How come device drivers are not baked into the kernel image?
# The kernel image would be huge.

# Since drivers are not part of the kernel image, how does the kernel actually load them?
# initramfs.

# What do you call the boot-time environment that uses initramfs?
# Early userspace.

# What is the basic usage of rg?
# rg <pattern> <file>

# In qemu, how do I break out of the kernel (e.g. so I can exit)?
# <ctrl-a> x

# Why doesn't the cat command hit vfs_read?
# It uses sendfile.

# What does iocb stand for?
# IO control block.

# What problem does the folio struct solve?
# If you are given a pointer to a page, it might not be the head page of a compound page, and it's expensive to find it. What struct solves this?

# What's a simple way to define struct folio?
# A struct page that is guaranteed not to be a tail page.

# What does struct iovec represent?
# A buffer in memory to or from which data is copied.

# Where is struct iovec defined?
# uapi/linux/uio.h

# What are the two fields of struct iovec (in plain English)?
# * pointer to the start of the buffer
# * length of the buffer in bytes

# Where is struct iov_iter defined?
# linux/uio.h

# What do you call the wrapper around iovec?
# iov_iter

# Which manpage category corresponds to programs/shell commands?
# What does man 1 cover?

# What does man 2 cover?
# Which manpage category corresponds to syscalls?

# What does man 3 cover?
# Which manpage category corresponds to library stuff?

# What do you call the program that oversees the compilation process?
# What is a **compiler driver**?

# How can I ask man to list its categories?
# man man

# What is the purpose of device plugging?
# What do you call the way for a developer to indicate that a set of block IOs can be batched?

# What do you call the struct related to plugging?
# struct blk_plug

# Where is struct blk_plug defined?
# linux/blkdev.h

# What does SMP stand for?
# Symmetric multiprocessing.

# What happens when you call blk_start_plug, but the process already has a plug?
# The plug request is ignored.

# What two architectures/advances created the need for blk-mq?
# * SSDs
# * NUMA

# Prior to blk-mq, block requests were stored in a {{c1::single queue}} with {{c2::one lock}}.

# How many IOPS can blk-mq handle?
# 10s of millions.

# What are the two types of queue for blk-mq?
# * software staging queues 
# * hardware dispatch queues

# In terms of NUMA, what is a node?
# For NUMA, what do you call a set of CPUs and their associated local memory?

# Is SSD IO parallel or serial?
# Parallel.

# For blk-mq, what determines the number of software queues?
# The number of cores.

# Prior to blk-mq, how many bio queues were there?
# One per block device.

# How come the pre-blk-mq design didn't handle multiple CPUs well?
# They had to share a single lock.

# What is cache line bouncing?
# If multiple cores frequently access the same memory location, the cache line containing that memory location will be to be transferred continually between the CPU caches.

# How can a scheduler reduce cache line bouncing?
# By scheduling a process to the same CPU.

# What do you call it when a scheduler tries to prevent cache coherency issues and cache line bouncing caused by NUMA?
# NUMA-aware scheduling.

# What is NUMA balancing?
# What do you call it when the kernel tries to move memory pages to the node where the process is running?

# In terms of NUMA, what is a synonym for socket?
# In terms of NUMA, what is a synonym for node?

# What is the Linux command-line utility for controlling NUMA policies?
# numactl

# What is the recommendation for blk-mq software queues - one queue per CPU, or per socket?
# One queue per socket.

# In NUMA, is L3 shared amongst the cores in a node or amongst nodes (usually)?
# Amongst the cores in a node.

# Is the block:block_rq_issue tracepoint called when we send a request to the device driver, or when we put it on a blk-mq dispatch queue?
# Device driver.

# For blk-mq, when a request is ready to be taken off a software queue, where does it go?
# To a hardware dispatch queue.

# Kyber adjusts {{c1::queue lengths}} to meet the given {{c2::latency targets}}.

# Is the read syscall blocking or non-blocking?
# Blocking.

# Are async applications single or multi threaded?
# Single.

# What kind of files are poll, epoll, and select used for?
# Sockets.

# What kind of files are poll, epoll, and select not helpful for?
# Regular files.

# What does poll always say about regular files?
# That they are ready for reading.

# Who created io_uring?
# Jens Axboe.

# Who created blk-mq?
# Jens Axboe.

# What is the central data structure for io_uring (I am not talking about a c struct)?
# A ring buffer.

# How can async programming be faster than multithreaded?
# By avoiding context switches.

# Really, what are the only two things computers do?
# * {{c1::compute}}
# * {{c2::I/O}}

# The aio family of system calls only works for {{c1::direct}} I/O (not {{c1::buffered}}).

# What is io_uring's main performance advantage?
# Sharing data between the kernel and user space without system calls.

# What is the library that abstracts io_uring?
# liburing

# What are the arguments for the readv syscall?
# * {{c1::fd}}
# * {{c2::array of `struct iovec`}}
# * {{c2::length of that array}}

# Is readv blocking or not?
# Blocking.

# What is the difference between the fstat and stat syscalls?
# fstat takes a file descriptor, stat takes a path.

# What syscall would I use to find out if a file is a regular file? (multiple OK answers)
# stat, fstat, lstat

# What syscall is like stat but for symlinks?
# lstat

# What syscall gives me info about a file? (multiple OK answers)
# stat, fstat, lstat

# What is each in-memory segment of a process broken up into?
# Pages.

# What is the most common cache line size?
# 64 bytes.

# In terms of memory, what is alignment?
# What do you call it when a memory address is a multiple of a power of two?

# When you call posix_memalign, are you aligning the virtual or physical address?
# Both.

# What syscall would you use to read data into multiple buffers?
# readv

# What do you call the IO performed by readv?
# Scatter-gather IO.

# What is the most useful property of readv?
# It's atomic.

# For io_uring, what does SQE stand for?
# Submission queue entry.

# In io_uring, how do we know which SQE a CQE corresponds to?
# The user_data field.

# By default, what is the order in which io_uring requests will be added to the completion queue?
# As soon as they complete.

# For an io_uring SQE struct, what field indicates the type of operation?
# opcode

# What utility would I use to set or read a process' CPU affinity?
# What is taskset for?

# In terms of disk storage, what does LBA stand for?
# Logical block address.

# Is a filesystem disk offset logical or physical?
# Logical.

# Roughly into what two layers can we split up the block layer?
# * {{c1::bio layer}}
# * {{c2::request layer}}

# How do we submit a bio struct to the bio layer?
# * {{c1::submit_bio}}
# * {{c2::generic_make_request}}

# What does `struct request` represent?
# What struct represents an IO request that will be delivered to a storage device?

# How do bios map to requests?
# One request can map to multiple bios.

# When would a request map to multiple bios?
# Plugging.

# Block requests can be merged. So what is the purpose of bio plugging?
# Reduce per-request overhead.

# How would I bind the memory allocation and CPU of process with PID 3 to NUMA node 0?
# {{c1::numactl}} {{c2::--cpunodebind=0}} {{c3::--membind=0}}

# What are the states that a page of virtual memory can be in? (4)
# * {{c1::unallocated}}
# * {{c2::allocated, but unmappped}}
# * {{c3::allocated and mapped to main memory}}
# * {{c4::allocated and mapped to swap}}

# What units would you use to state the bandwidth of CPU<>main memory access?
# Cache lines per second.

# Why would you use cache lines per second rather than pages or bytes per second to state the bandwidth of CPU<>main memory access?
# Because a CPU never transfers more or less than a cache line at a time.

# Why does a page in the page cache have a "locked" bit?
# If a new user is given access to a page, and it's in the process of being filled in, if the new user could access the page before it's filled in, they could see another user's data.

# What are the two lists of pages in the page cache?
# * active
# * inactive

# What do we store in the inactive list of the page cache?
# Pages that have only been accessed once.

# If we evict a page from the inactive list, what do we store about that page?
# We store a shadow entry.

# What is the purpose of shadow entries?
# If we evict a page from the inactive list, and then a user accesses that page again, and we find a shadow entry, we know that we should never have evicted the page.

# If a user access a page and there's a shadow entry for it, what list do we put the page in?
# The active list.

# In the page cache, which list do we evict pages from?
# The inactive list.

# What do we do when a user accesses a page on the inactive list?
# We move it to the active list.

# What utility would I use to find out how many pages a file uses in the page cache?
# vmtouch

# What utility would I use to find out how much of a file (in bytes) is in the page cache?
# vmtouch

# What syscall would we use to notify the kernel that we don't want readahead?
# posix_fadvise

# What is the file_dirty field of memory.stat for a cgroup?
# How do we find out how many bytes for a cgroup are marked as dirty?

# What is the diff between msync and fsync?
# msync is for memory-mapped files

# What syscall can I use to find out if a page is currently in memory?
# mincore

# When we load a page into the page cache for the first time, which list do we put it on?
# The inactive list.

# What algorithm does the page cache use for eviction?
# LRU

# For NUMA, how many active/inactive lists are there?
# One per NUMA node.

# What 2 kinds of pages do we have separate active/inactive lists for?
# * anonymous
# * file-backed

# What utility, with what short flag, would I use to drop all pages for a file?
# vmtouch -e

# What is the range for the swappiness parameter?
# 0 to 200

# An application has allocated some memory. What will cause that memory to get mapped?
# A fault, i.e. the application actually accessing that memory.

# What is one way I can figure out how much memory to assign to a cgroup/container?
# Set some initial value and then see if it's stalled or not using PSI.

# What does working set size measure for a process?
# What measures the amount of active memory a process needs at one time to work efficiently?

# What version of Unix introduced malloc in its current form?
# v7

# What year did Unix v7 come out?
# 1979

# What do I call to unallocate memory allocated by alloc?
# free

# Which letters are used in hex?
# A through F.

# We are doing a small write to a file (smaller than a page). Why might the kernel first read an entire page into the page cache?
# "Because we are modifying in the middle of the file; we have to first load in the stuff that we are modifying."
