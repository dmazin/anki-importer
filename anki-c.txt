# This is a set of Anki cards. Example:
# What is meant by "resident memory"?
# What do you call memory that currently resides in main memory?

# What is the synonym for physical memory?
# What is the synonym for main memory?

# What kind of memory is the heap (in terms of paging)?
# Anonymous memory.

# Historically, how big have memory pages been? (2 values)
# 4 or 8 KB.

# How can virtual memory be bigger than main memory?
# Swapping.

# What are the two kinds of paging?
# * file system paging
# * swapping

# What is a synonym for swapping?
# What is a synonym for anonymous paging?

# Why is anonymous paging called anonymous?
# Because it doesn't refer to data with any defined file system location.

# In terms of memory, what does RSS stand for?
# Resident Set Size.

# What is the difference between allocated and mapped memory?
# Allocated memory has been reserved in virtual memory, but not necessarily mapped to a location in physical memory.

# What does resident set size measure?
# The amount of memory that has been allocated and mapped to physical memory.

# What does virtual memory size measure?
# The amount of memory that has been allocated in virtual memory, whether or not it has been mapped.

# Besides being mapped to physical memory, what else might a virtual address be mapped to?
# Swap.

# What was the maximum process size on the PDP-11?
# 64 KB.

# What are the states that a page of virtual memory can be in? (4)
# * {{c1::unallocated}}
# * {{c2::allocated, but unmappped}}
# * {{c3::allocated and mapped to main memory}}
# * {{c4::allocated and mapped to swap}}

# What stdlib function is used to allocate memory?
# malloc.

# In terms of memory, what does PSS stand for?
# Proportional Set Size.

# What does proportional set size measure?
# The private memory usage of a process, excluding shared memory.

# Which tool can I use to measure proportional set size?
# pmap.

# What's the maximum amount of memory a 32bit process can address?
# 4 GB.

# On Linux, how much virtual memory is reserved for the kernel?
# 1 GB.

# What does DRAM stand for?
# Dynamic Random Access Memory.

# What two electrical components are used for each bit in DRAM?
# A capacitor and a transistor.

# Why does DRAM lose values when power is removed?
# Because a capacitor loses charge without power.

# What do we use to measure the access time of main memory?
# The time between sending a memory module the desired address and when the data is available to be read.

# What is the weird term used to refer to main memory access time?
# Column address strobe.

# Per Gregg, what is the access latency for DDR4?
# 10-20 ns.
# What value will uninitialized variables have?
# It's indeterminate.

# What's the difference between while and do while?
# Do while will execute once even if the while expression is false.

# What does the for expression look like if you want to loop 10 times?
# {{c1::i = 0}};{{c2::i < 10}};{{c3::i++}}

# What happens if you don't put break in a switch expression?
# The next case will be evaluated.

# In size_t, what does the t stand for?
# type
# For a string array, how do we indicate the end of the string?
# A null character.

# How can I find out the length of a string (without using strlen)?
# Iterate through the string until you find a null character.

# What does the %Y format code represent in strftime?
# For strftime, what formatting character gets me 2023?

# What does the %m format code represent in strftime?
# For strftime, what formatting character gets me a two-digit representation of the month (e.g., 04 for April)?

# What does the %d format code represent in strftime?
# For strftime, what formatting character gets me a two-digit representation of the day of the month (e.g., 21)?

# What does the %H format code represent in strftime?
# For strftime, what formatting character gets me a two-digit representation of the hour in 24-hour format (e.g., 14 for 2 PM)?

# What does the %I format code represent in strftime?
# For strftime, what formatting character gets me a two-digit representation of the hour in 12-hour format (e.g., 02 for 2 PM)?

# What does the %M format code represent in strftime?
# For strftime, what formatting character gets me a two-digit representation of the minute (e.g., 35)?

# What does the %S format code represent in strftime?
# For strftime, what formatting character gets me a two-digit representation of the second (e.g., 48)?

# What does the %p format code represent in strftime?
# For strftime, what formatting character gets me either "AM" or "PM" based on the 12-hour clock?

# What does the %A format code represent in strftime?
# For strftime, what formatting character gets me the full weekday name (e.g., Sunday)?

# What does the %B format code represent in strftime?
# For strftime, what formatting character gets me the full month name (e.g., April)?

# What does the %b format code represent in strftime?
# For strftime, what formatting character gets me the abbreviated month name (e.g., Apr)?

# What does the %Z format code represent in strftime?
# For strftime, what formatting character gets me the timezone name (e.g., Pacific Standard Time)?

# What do you call the standard that specifies that, like, %Y means 2023?
# strftime

# What do you call the 32bit disk ID that I get by left-shifting the major number by 20?
# What is kdev_t?

# How would I set a constant DEVICE equal to sdd?
# "#define DEVICE sdd"

# "What is the effect of the `const` here? `const struct file_operations *f_op;`"
# We cannot change the contents of the struct.

# How do you enclose a string?
# Double quotes.

# What are single quotes used for?
# Enclosing a character.

# What is the difference between a character and a string?
# A string is an array of characters.

# How would I declare and initialize the string "Hello" into var `s`?
# "char *s = \"Hello\";"

# What is the printf format specifier for printing a string?
# What is the %s printf format specifier for?

# What is a valid way to declare a string "Hello" into a var `s` without using a pointer?
# "char s[] = \"Hello\";"

# What is the printf format specifier for printing a char?
# What is the %c printf format specifier for?

# What do you call `char *s = "Hello, world!"`?
# A string literal.

# What function can I use to get the length of a string?
# strlen

# What is the maximum number I can hold in a 1-byte int?
# 255

# How can I write the NUL character in c?
# What is \0?

# What function can I use to clone a string?
# strcpy

# What's an annoying thing to remember about strcpy?
# The source pointer is the *second* argument.

# When I pass a struct as a parameter to a function, what will the function get?
# A copy of the struct.

# What is c->price syntactic sugar for?
# (*c).price

# Why might the size of a struct be different than the sum of the sizes of its members?
# Padding.

# You have two structs. Why can't you compare them with `a = b`?
# They might have different padding.

# What is the stdio function for opening a file for reading?
# fopen

# What is the stdio function for reading a single character from a file?
# fgetc

# What is the stdio function for closing a file?
# fclose

# Declare a variable that will be used to hold the output of fopen.
# "FILE *f;"

# What do I pass to fopen to open a text file for reading?
# r

# What happens to an opened file when our program exits?
# It's automatically closed.

# What happens if I call fgetc twice in a row - will it read from the same position, or will the position advance?
# It will advance.

# What will fgetc return if it reaches the end of the file?
# EOF

# What is the return type of fgetc?
# int

# Initialize a buffer that will hold the output of an fgets call.
# "char buffer[256];"

# What will fgets return once it reaches the end of the file?
# NULL

# What is like printf, but for reading input?
# scanf

# What is the difference between printf and fprintf?
# fprintf lets you specify where to write. printf writes to stdout.

# What is like fprintf, but for input?
# fscanf

# What does the %% format specifier represent in C's printf function?
# For printf in C, what format specifier should I use to print a literal percent sign (%)?

# What does the %f format specifier represent in C's printf function?
# For printf in C, what format specifier should I use to print a floating-point number in decimal notation?

# What stdio function can I use for writing a string to a file?
# fputs

# What do I pass to fopen to open a binary file for reading?
# rb

# Why would I not use fprintf to parse a binary file?
# The binary file might contain NUL characters, which would confuse fprintf.

# What 2 stdio functions would I usually use to read/write binary files?
# fread, fwrite

# What extension should I use for indicating a binary file?
# .bin

# What is the output type and description of fread?
# size_t, number of items read

# Let's say I have `int *p`. Say I do `p++`. By how much will p advance?
# sizeof(int)

# In terms of pointer arithmetic, what is a[b] equivalent to?
# *(a+b)

# An array variable is a pointer. Yet, what's one thing you can do with a pointer, but not with an array variable?
# The pointer can be modified, but not the array variable.

# What is the equivalent signature for `int my_strlen(char *s)`?
# What is the equivalent signature for `int my_strlen(char s[])`?

# Why can you not do pointer arithmetic with a void pointer?
# Pointer arithmetic requires knowing the type size, which in a void is uknown.

# Does an array get allocated to the stack or the heap?
# The stack.

# What is the only thing allocated to the heap?
# Manually allocated memory.

# What does malloc return if it can't allocate the memory?
# What does it mean if malloc returns NULL?

# What's the main difference between malloc and calloc?
# calloc initializes the memory to 0.

# What function should I use if I want to grow the memory allocated by malloc?
# realloc

# What stdlib function would I use to print an error?
# perror

# Where does perror print to?
# stderr

# Where do I import perror from?
# stdio.h

# What do I usually call after calling perror?
# exit

# The {{c1::off_t}} stdlib type can be used to represent {{c2::file offsets}} and {{c3::file sizes}}. It is usually backed by {{c4::long}} or {{c4::long long}}. It is imported from {{c5::sys/types.h}}.

# If I divide a float `a` by another float `b`, how do I get the answer as an int?
# (int)(a/b)

# I want to hold 10 `struct iovec`s where I don't know their length. Why wouldn't I use an array to store them?
# Because we don't know the memory size of the array at compile time.

# What stdlib function would I use to set all the values of an array to 0?
# memset

# What stdlib function would I use to map general address space into a process' address space?
# mmap

# Where can I find macros that specify the max of long long (etc) on my system?
# limits.h

# What is long and long long (in plain English)?
# Really big ints.

# What is double (in plain English)?
# A float with extra precision.

# How do I know I am looking at an octal number?
# It starts with a 0 but not 0x.

# What is the format specifier for printing a binary number?
# There isn't one.

# When I see 1234L, what does the L indicate?
# It's a long integer.

# What format specifier prints a number in scientific notation?
# What does the %e format specifier represent in C's printf function?

# What's the difference between printf and sprintf/snprintf?
# sprintf/snprintf let you pass a string that will store the output.

# Why is snprintf safer than sprintf?
# Because it lets you specify the size of the output buffer, so you can't accidentally overflow it.

# What function would I use to turn an integer or float into a string? (multiple acceptable answers)
# sprintf/snprintf

# Where do I import atoi etc from?
# stdlib.h

# Where do I import sprintf from?
# stdio.h

# What stdlib function would I use to convert a string to an integer?
# atoi

# What does the a in atoi stand for?
# ascii

# What is like atol but with better error handling?
# What is the difference between strtol and atol?

# What would I use atol for?
# What stdlib function would I use to convert a string to a long integer?

# Why is this legal? `int x = 3 + 1.2`
# Because C knows how to implicitly convert certain types.

# How can I ensure that `void foo(int x)` doesn't modify x (tell me what to put in the parens)?
# const int x

# What is `const int *p` equivalent to?
# What is `int const *p` equivalent to?

# How do I specify that a pointer `p` which points at an `int` can only point at that one address?
# "int *const p;"

# What is the `restrict` keyword for?
# How do I tell the compiler that a pointer is the only pointer that can point at a particular address?

# What is the `volatile` keyword for?
# How do I tell the compiler that it should look up the value of a variable every time it's used?

# How do I tell the compiler that it should initialize a variable only once?
# What is the `static` keyword for?

# I declared `int a` in one file. How do I declare it in another file?
# "extern int a;"

# What keyword would I use to make it so that a function can only be used in that file?
# What does it mean when I see a function declared as static?

# What does Beej recommend about compiler warnings?
# They should all be addressed.

# What preprocessor directive checks if a variable has *not* been defined?
# "#ifndef"

# Why is a pragma guard not used?
# Because it's not standard.

# What can I replace a header guard with? (hint: it's a preprocessor directive)
# "#pragma once"

# What does the -c gcc flag do?
# How do I tell gcc to compile but not link?

# What is the extension of files produced by gcc -c?
# What does it mean when a file has the .o extension?

# What is the signature of main when it takes positional arguments?
# int main({{c1::int argc}}, {{c2::char *argv[]}})

# What param for main tells me the number of arguments?
# argc

# How can I make the compiler stop complaining about an unused variable?
# Cast it to void.

# How come it's legal for main not to return anything even though it's signature says it returns an int?
# Because the compiler will automatically return 0.

# What stdlib function can I use to get the value of an env var?
# getenv

# What do <> mean in an #include?
# The file is in a system directory (not current directory).

# Beside functions, what else can I import into other files?
# Variables defined outside functions.

# How do I do a conditional for constants? (e.g. compare FOO to 2)
# "#if FOO == 2"

# What is another way to say `#ifdef`?
# What is another way to say `#if defined`?

# `#elifdef` is not a thing. What can I say instead?
# `#elif defined`

# How can I clear out a macro?
# `#undef`

# What macro tells me the current file?
# __FILE__

# What macro tells me the current line?
# __LINE__

# What identifier tells me the name of the current function?
# __func__

# What should I remember when making a math macro?
# Wrap everything in parens.

# Define a macro that will square `x`.
# "{{c1::#define}} {{c2::SQR(x)}} {{c3::((x) * (x))}}"

# What does a backslash look like?
# What do you call \?

# What does a forward slash look like?
# What do you call /?

# How can I remember what a forward slash looks like?
# Imagine yourself leaning forward.

# What is the return value of malloc?
# A pointer to the beginning of the block you just allocated.

# How would I define a variable-length array named `data` that holds `char`s?
# char data[]

# Why do C compilers pad structs?
# Memory alignment.

# What determines the padding in a struct?
# The size of the biggest type of the fields.

# The pointer to a struct is the same as a {{c1::pointer to the first field of the struct}}.

# How can I define an `unsigned int a` in a struct that will use at most 5 bits?
# {{c1::unsigned int a:5}}
# What is this called? {{c2::bitfields}}

# If you do use bitfields, what must you remember to do?
# Make them adjacent.

# What type is `union` similar to?
# struct

# Why would you use a union?
# So you can use the same memory space for different types.

# What will be the size of a union?
# The size of the biggest type.

# Say I have a `union foo x` with an int in it. How do I get a pointer `p` to the int?
# {{c1::int *p}} = {{c2::(int *)}}{{c3::&x}}

# What is meant when we say multiple structs have a common initial sequence?
# The first n fields of all structs have compatible types.

# When a union is full of structs, and the structs have a common initial sequence, what are we allowed to do?
# We can refer to the structs interchangeably.

# Why do functions like fread return `size_t` rather than `int`?
# Portability.