# This is a set of Anki cards. Example:
# What is meant by "resident memory"?
# What do you call memory that currently resides in main memory?
# 
# What is the synonym for physical memory?
# What is the synonym for main memory?
# 
# What kind of memory is the heap (in terms of paging)?
# Anonymous memory.
# 
# Historically, how big have memory pages been? (2 values)
# 4 or 8 KB.
# 
# How can virtual memory be bigger than main memory?
# Swapping.
# 
# What are the two kinds of paging?
# * file system paging
# * swapping
# 
# What is a synonym for swapping?
# What is a synonym for anonymous paging?
# 
# Why is anonymous paging called anonymous?
# Because it doesn't refer to data with any defined file system location.
# 
# In terms of memory, what does RSS stand for?
# Resident Set Size.
# 
# What is the difference between allocated and mapped memory?
# Allocated memory has been reserved in virtual memory, but not necessarily mapped to a location in physical memory.
# 
# What does resident set size measure?
# The amount of memory that has been allocated and mapped to physical memory.
# 
# What does virtual memory size measure?
# The amount of memory that has been allocated in virtual memory, whether or not it has been mapped.
# 
# Besides being mapped to physical memory, what else might a virtual address be mapped to?
# Swap.
# 
# What was the maximum process size on the PDP-11?
# 64 KB.
# 
# What are the states that a page of virtual memory can be in? (4)
# * {{c1::unallocated}}
# * {{c2::allocated, but unmappped}}
# * {{c3::allocated and mapped to main memory}}
# * {{c4::allocated and mapped to swap}}
# 
# What stdlib function is used to allocate memory?
# malloc.
# 
# In terms of memory, what does PSS stand for?
# Proportional Set Size.
# 
# What does proportional set size measure?
# The private memory usage of a process, excluding shared memory.
# 
# Which tool can I use to measure proportional set size?
# pmap.
# 
# What's the maximum amount of memory a 32bit process can address?
# 4 GB.
# 
# On Linux, how much virtual memory is reserved for the kernel?
# 1 GB.
# 
# What does DRAM stand for?
# Dynamic Random Access Memory.
# 
# What two electrical components are used for each bit in DRAM?
# A capacitor and a transistor.
# 
# Why does DRAM lose values when power is removed?
# Because a capacitor loses charge without power.
# 
# What do we use to measure the access time of main memory?
# The time between sending a memory module the desired address and when the data is available to be read.
# 
# What is the weird term used to refer to main memory access time?
# Column address strobe.
# 
# Per Gregg, what is the access latency for DDR4?
# 10-20 ns.

# Briefly, what is a kfunc?
# It's like a next-generation kprobe.

# What bpftrace event can I subscribe to so I can do something every 1 second?
# interval:s:1

# The rest of the questions are about Python.

# What built-in would I use to list the files of a directory?
# os.listdir (os.walk is also an OK answer)

# What built-in would I use to recursively traverse a directory?
# os.walk

# What is the return type of os.walk?
# A generator.

# What is the return type of os.listdir?
# A list.

# What built-in would I use to delete a dir?
# os.rmdir

# What built-in would I use to delete a file?
# os.remove (os.unlink is also an OK answer)

# What is the difference between os.remove and os.unlink?
# Nothing. os.unlink is a synonym for os.remove.

# What built-in would I use to get the size of a file as an integer?
# os.path.getsize

# What is the difference between os.path.getsize and os.stat?
# os.stat returns a lot more information than the size.

# What is the difference between os.listdir and os.walk?
# "os.listdir merely lists the contents of the current directory; os.walk recursively traverses a directory."

# What do I do to the filenames returned by os.walk to turn them into absolute paths?
# os.path.join(dirpath, filename)

# What should I remember about the filenames retruend by os.walk?
# They are relative to the directory you passed in.

# How would I get the number of lines of `file`?
# {{c1::len}}({{c2::file.readlines()}})

# What is the difference between `file.read()` and `file.readlines()`?
# `file.read()` returns the entire file as a string. `file.readlines()` returns a list of strings, one for each line.

# Where would I import Path from?
# pathlib

# I have access to a `p: Path` object. What will `p.iterdir()` return?
# A generator of its children.

# What built-in function would I use to parse a date string?
# {{c1::datetime}}.{{c2::strptime}}

# What built-in data structure could I use to calculate a moving average?
# deque

# How do I run unittest from the CLI?
# {{c1::python}} {{c2::-m}} {{c3::unittest}} {{c3::<test file or dir>}}

# What is the difference between `os.path.join()` and `os.path.abspath()`?
# os.path.join() is used to construct a path.
# os.path.abspath() is used to get the absolute path of an existing file.

# What builtin would I use to turn path like `../foo/bar` into `/home/username/foo/bar`?
# os.path.normpath()

# What is the difference between os.path.abspath() and os.path.realpath()?
# os.path.abspath() returns the absolute path of a file.
# os.path.realpath() returns the absolute path of a file, resolving any symlinks.

# What is a "canonical path"?
# An absolute path where all symlinks have been resolved.

# What is the difference, in memory, between file.readline() and file.readlines()?
# file.readlines() loads the whole file into memory. file.readline() loads one line at a time.

# Why is os.scandir more efficient than os.listdir when I want to access file attributes?
# Because with os.listdir I would need additional syscalls to access the file attributes.

# What built-in is like os.listdir, but tells me file attributes?
# When would I use os.scandir instead of os.listdir?

# What 3rd party package would I use to subscriby to inotify events?
# watchdog

# What is the difference between `else` and `finally` in a `try` block?
# `else` is called if no exception occurs. `finally` is *always* called.

# What is the difference between the `w` and `w+` modes?
# `w` will truncate if the file exists; `w+` will not.

# What built-in will give me tuples of the first elements of a set of lists, second, etc?
# What can I use `zip` for?

# What operator lets me unpack a list into separate arguments?
# What does `*` do?

# What operator lets me unpack a dictionary into separate arguments?
# What does `**` do?

# What is (briefly) the difference between `open` and `os.open`?
# `os.open` is lower-level.

# What two methods must an iterator implement?
# * {{c1::__iter__}}
# * {{c2::__next__}}

# What is the biggest difference between an iterator and a generator?
# An iterator is a class. A generator is a function.

# When defining an iterator's methods, do I use `yield` or `return`?
# return.

# When defining a generator, do I use `yield` or `return`?
# yield.

# What built-in function tells me if a class is a child of another class?
# issubclass

# create a namedtuple named `Person` with one field, `name`
# from {{c1::collections}} import namedtuple
# {{c2::Person}} = namedtuple({{c2::'Person'}}, {{c3::['name']}})

# How do I make a dataclass immutable?
# Pass `frozen=True` when defining it.

# What is the type annotation of something that might be an `int` or a `dict`?
# Union[int, dict] 

# create a list of d's items, sorted by value descending; upon tie key ascending
# d = {'b': 2, 'a': 1}
# sorted_items = {{c1::sorted}}(d.items(), {{c2::key}}=lambda {{c3::item}}: {{c3::(-item[1], item[0])}})

# How can I represent an infinite value that will be comparable to ints?
# float('inf')

# How can I invoke unittest from a Python file?
# {{c1::unittest}}.{{c1::main()}}

# When invoking unittest from within a Python file, how can I prevent unittest from exiting after running the tests?
# Pass `exit=False` to the unittest invocation.

# Basic unittest usage
# class {{c1::Test}}Foo({{c2::unittest}}.{{c2::TestCase}}):
#     def {{c3::test_}}bar(self):
#         self.assertTrue(True)
