# This is a set of Anki cards. Example:
# What is meant by "resident memory"?
# What do you call memory that currently resides in main memory?
# 
# What is the synonym for physical memory?
# What is the synonym for main memory?
# 
# What kind of memory is the heap (in terms of paging)?
# Anonymous memory.
# 
# Historically, how big have memory pages been? (2 values)
# 4 or 8 KB.
# 
# How can virtual memory be bigger than main memory?
# Swapping.
# 
# What are the two kinds of paging?
# * file system paging
# * swapping
# 
# What is a synonym for swapping?
# What is a synonym for anonymous paging?
# 
# Why is anonymous paging called anonymous?
# Because it doesn't refer to data with any defined file system location.
# 
# In terms of memory, what does RSS stand for?
# Resident Set Size.
# 
# What is the difference between allocated and mapped memory?
# Allocated memory has been reserved in virtual memory, but not necessarily mapped to a location in physical memory.
# 
# What does resident set size measure?
# The amount of memory that has been allocated and mapped to physical memory.
# 
# What does virtual memory size measure?
# The amount of memory that has been allocated in virtual memory, whether or not it has been mapped.
# 
# Besides being mapped to physical memory, what else might a virtual address be mapped to?
# Swap.
# 
# What was the maximum process size on the PDP-11?
# 64 KB.
# 
# What are the states that a page of virtual memory can be in? (4)
# * {{c1::unallocated}}
# * {{c2::allocated, but unmappped}}
# * {{c3::allocated and mapped to main memory}}
# * {{c4::allocated and mapped to swap}}
# 
# What stdlib function is used to allocate memory?
# malloc.
# 
# In terms of memory, what does PSS stand for?
# Proportional Set Size.
# 
# What does proportional set size measure?
# The private memory usage of a process, excluding shared memory.
# 
# Which tool can I use to measure proportional set size?
# pmap.
# 
# What's the maximum amount of memory a 32bit process can address?
# 4 GB.
# 
# On Linux, how much virtual memory is reserved for the kernel?
# 1 GB.
# 
# What does DRAM stand for?
# Dynamic Random Access Memory.
# 
# What two electrical components are used for each bit in DRAM?
# A capacitor and a transistor.
# 
# Why does DRAM lose values when power is removed?
# Because a capacitor loses charge without power.
# 
# What do we use to measure the access time of main memory?
# The time between sending a memory module the desired address and when the data is available to be read.
# 
# What is the weird term used to refer to main memory access time?
# Column address strobe.
# 
# Per Gregg, what is the access latency for DDR4?
# 10-20 ns.

# What is the difference between fsync and fdatasync?
# fdatasync only waits for the file data to be written, and essential metadata.

# In VFS, what does the superblock object represent?
# A mounted filesystem.

# What does dentry stand for?
# Directory entry.

# What does inode stand for?
# Index node.

# What do you call the VFS object that stores the filesystem's metadata?
# The superblock.

# What 3 types of files is mknod used to create?
# * sockets
# * device files
# * named pipes

# What does a dentry represent (note that this is not merely what it stands for)?
# A component of a path.

# Why might a dentry object not associated with any inode be kept around?
# Something might continually check for a file's existence. Without a dentry, this would be slow.

# What operation do dentry objects speed up?
# Path traversal.

# What are the three possible states for a dentry object?
# * negative
# * used
# * unused

# What makes sendfile performant?
# It happens entirely in kernel space.

# Where is the super_block struct defined?
# linux/fs.h

# Where is the inode struct defined?
# linux/fs.h

# Where is the dentry struct defined?
# linux/dcache.h

# Where is the page struct defined?
# linux/mm_types.h

# Where is the file struct defined?
# linux/fs.h

# Where is the address_space struct defined?
# linux/fs.h

# How to I get the inode struct from the file struct?
# f_inode

# How do I get the device identifier from the superblock struct?
# s_dev

# How do I get the superblock from the inode struct?
# i_sb

# What inode field tells me the inode number?
# i_ino

# How do I get the inode from a page struct?
# page->mapping->host

# How do I get the inode from a file struct?
# file->f_inode

# Where is vfs_read defined?
# fs/read_write.c

# Where is generic_file_read_iter defined?
# mm/filemap.c

# Where is filemap_read defined?
# mm/filemap.c

# How big are memory pages on 32bit architectures?
# 4 KB

# How big are memory pages on 64bit architectures?
# 8 KB

# What struct represents every physical page?
# struct page

# When a page struct is used for the page cache, what field will be set?
# mapping

# For the page struct, what is the type of the mapping field?
# struct address_space

# What kind of memory does the page struct correspond to?
# Physical memory.

# The same data structure may be allocated and deallocated many times. What other data structure makes this performant?
# A free list.

# Why does a free list make allocation and deallocation performant?
# Because if we need the object again, we can just get it from the free list.

# What is one way to conceptualize the free list?
# A cache for data structures.

# In terms of the free list, what do we do when we no longer need a data structure?
# We return it to the free list.

# Why is the slab layer necessary?
# If there were multiple free lists, it would be difficult to manage them all. What is the solution to this?

# What is the slab layer divided up into?
# Caches.

# In terms of the slab layer, what is a cache?
# It's a cache for a specific type of data structure.

# Typically, how big is a slab?
# A page.

# # What are some things cached in the slab layer?
# # * struct inode
# # * struct task_struct

# What is the memory difference between the user and kernel stacks?
# User stacks are dynamically sized, while the kernel stack is fixed size.

# How big is the per-process kernel stack? (range)
# 1-2 pages.

# # Why is the per-process kernel stack fixed size?
# # * {{c1::Lower memory consumption.}}
# # * {{c2::Simpler code (no stack management code needed).}}

# We used to make the per-process kernel stack 2 pages. Now it's 1 page. Why?
# The longer an OS operates, the harder it is to find two continuous pages.

# In terms of memory, what is temporal locality?
# What do you call the fact that if you access a memory location, you're likely to access it again soon?

# What is the struct used to represent entries in the page cache?
# What is `struct address_space` for?

# What field of address_space points to the inode?
# host

# How do we implement something sort of like methods for a struct?
# The struct can point to another struct that lists the functions associated with the struct.

# In terms of the page cache, what is a dirty page?
# What do we call a page cache page that has been modified?

# What do you call the in-memory representation of a physical disk block?
# A buffer.

# What is the upper limit on the size of a fs block?
# The page size.

# What do you call the struct corresponding to a dikk block buffer?
# struct buffer_head

# Where is the buffer_head struct defined?
# linux/buffer_head.h

# What is the purpose of the buffer_head struct?
# It maps an on-disk block to an in-memory buffer.

# What do you call the representation of an in-flight block IO operation?
# What is the bio struct?

# Where is the bio struct defined?
# linux/bio.h

# What Linux version unified the buffer and page cache?
# 2.4

# In computer science, what is meant by a gang?
# In computer science, what is the term of a group of things that operate in parallel?

# What is the oldest struct in Linux?
# buffer_head

# What do you call the new struct that, like buffer_head, maps disk blocks to locations in the page cache?
# struct iomap

# What year was ext2 added to the kernel?
# 1993

# When did ext4 gain support for extents?
# 2006

# What is always the first block in a file system?
# The boot block.

# In terms of file systems, what is the boot block for?
# It holds information about how to boot the operating system.

# What is vmlinux?
# What is the name of the Linux kernel binary?

# What command tells methe number of CPUs?
# What does nproc do?

# In make, what short flag do I use to make it build in parallel?
# In make, what does the -j flag do?

# For a hard disk, what two physical operations are the source of most latency?
# * seek
# * rotation

# What does initramfs stand for?
# Initial RAM file system.

# How come device drivers are not baked into the kernel image?
# The kernel image would be huge.

# Since drivers are not part of the kernel image, how does the kernel actually load them?
# initramfs.

# What do you call the boot-time environment that uses initramfs?
# Early userspace.

# What is the basic usage of rg?
# rg <pattern> <file>

# In qemu, how do I break out of the kernel (e.g. so I can exit)?
# <ctrl-a> x

# In gdb, how do I see the breakpoints I've set?
# i b

# In gdb, how do I delete a breakpoint?
# d <breakpoint number>

# In gdb, what is the commant for printing the value of an expression?
# p

# In gdb, what is the difference between n and s?
# n steps over a function call, while s steps into a function call.

# How do I execute a command every time a breakpoint is hit?
# commands <breakpoint number>

# How do I print the kernel stack?
# bt

# When in a breakpoint, if I have a pointer to some struct, how can I print general info about that struct (e.g. types)?
# ptype

# How do I print 128 bytes of memory starting at address 0x1000 in hex?
# x/128x 0x1000

# How do I print 128 bytes of memory starting at address 0x1000 in ASCII?
# x/128c 0x1000

# How do I add a breakpoint for line 2 for file main.c?
# b main.c:2

# What short flag do I pass to qemu to make it start a gdb server?
# -s

# What short flag do I pass to qemu to make it pause at startup, so that it waits for a debugger to connect?
# -S